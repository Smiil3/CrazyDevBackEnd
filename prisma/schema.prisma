generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Host {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt
  nom       String    @db.VarChar(100)
  prenom    String?   @db.VarChar(100)
  email     String    @unique(map: "uq_hosts_email") @db.VarChar(255)
  telephone String?   @db.VarChar(30)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(0)
  biens     biens[]

  @@map("hosts")
}

model biens {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  host_id       Int             @db.UnsignedInt
  titre         String          @db.VarChar(200)
  description   String?         @db.Text
  ecozone_id    Int             @db.UnsignedInt
  type_id       Int             @db.UnsignedInt
  prix_par_nuit Decimal?        @db.Decimal(10, 2)
  is_active     Boolean?        @default(true)
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  biens_ecozone biens_ecozone   @relation(fields: [ecozone_id], references: [id], onUpdate: NoAction, map: "fk_biens_ecozone")
  hosts         Host            @relation(fields: [host_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_biens_host")
  biens_type    biens_type      @relation(fields: [type_id], references: [id], onUpdate: NoAction, map: "fk_biens_type")
  biens_chambre biens_chambre[]
  demande       demande[]

  @@index([ecozone_id], map: "idx_biens_ecozone")
  @@index([host_id], map: "idx_biens_host")
  @@index([type_id], map: "idx_biens_type")
}

model biens_chambre {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  biens_id    Int     @db.UnsignedInt
  label       String  @db.VarChar(150)
  description String? @db.Text
  nombre      Int?    @default(1)
  biens       biens   @relation(fields: [biens_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_chambre_biens")

  @@index([biens_id], map: "idx_chambre_biens")
}

model biens_ecozone {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  label       String  @unique(map: "uq_biens_ecozone_label") @db.VarChar(120)
  description String? @db.VarChar(255)
  biens       biens[]
}

model biens_type {
  id    Int     @id @default(autoincrement()) @db.UnsignedInt
  label String  @unique(map: "uq_biens_type_label") @db.VarChar(100)
  biens biens[]
}

model demande {
  id           Int                   @id @default(autoincrement()) @db.UnsignedInt
  biens_id     Int                   @db.UnsignedInt
  guest_nom    String                @db.VarChar(100)
  guest_prenom String                @db.VarChar(100)
  guest_email  String                @db.VarChar(255)
  guest_phone  String?               @db.VarChar(50)
  message      String?               @db.Text
  date_debut   DateTime?             @db.Date
  date_fin     DateTime?             @db.Date
  created_at   DateTime?             @default(now()) @db.DateTime(0)
  email_status demande_email_status? @default(queued)
  biens        biens                 @relation(fields: [biens_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_demande_biens")

  @@index([biens_id, created_at], map: "idx_demande_biens")
}

enum demande_email_status {
  queued
  sent
  failed
}
